{"ast":null,"code":"import axios from 'axios';\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token'); // Retrieve token from localStorage\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`; // Add token to Authorization header\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n//const API_URL = process.env.REACT_APP_API_BASE_URL;\n\n// Login function\nconst login = async (email, password) => {\n  try {\n    // Prepare data as key-value pairs\n    const formData = new URLSearchParams();\n    formData.append('username', email);\n    formData.append('password', password);\n\n    // Send POST request with x-www-form-urlencoded format\n    const response = await axios.post(`/auth/login`, formData, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded' // Specify content type\n      }\n    });\n    const rawToken = response.data; // Full token, e.g., \"Bearer eyJhbGci...\"\n    const jwtToken = rawToken.split(' ')[1]; // Extract the JWT part\n\n    // Log the raw token and the extracted JWT\n    console.log('Full Token:', rawToken);\n    console.log('JWT Token:', jwtToken);\n    axios.defaults.headers.common['Authorization'] = rawToken;\n    // Save only the JWT in local storage\n    localStorage.setItem('token', jwtToken);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed');\n  }\n};\n\n//Expired Function\nconst isTokenExpired = () => {\n  const token = getToken();\n  if (!token) return true; // If no token exists, treat it as expired\n\n  try {\n    // Decode the token payload\n    const [, payload] = token.split('.');\n    const decodedPayload = JSON.parse(atob(payload));\n    const now = Math.floor(Date.now() / 1000);\n    return false;\n    return decodedPayload.exp < now; // true if expired, false otherwise\n  } catch (error) {\n    console.error('Error decoding token:', error);\n    return true;\n  }\n};\nconst tokenTimeRemaining = () => {\n  const token = getToken();\n  if (!token) return -1; // If no token exists, treat it as expired\n\n  try {\n    // Decode the token payload\n    const [, payload] = token.split('.');\n    const decodedPayload = JSON.parse(atob(payload));\n    const now = Math.floor(Date.now() / 1000);\n    const remain = decodedPayload.exp - now;\n    if (remain >= 0) return remain;else {\n      //logout();\n    }\n  } catch (error) {\n    console.error('Error decoding token:', error);\n    return -1;\n  }\n};\n\n// Logout function\nconst logout = () => {\n  localStorage.removeItem('token');\n  delete axios.defaults.headers.common['Authorization'];\n  window.location.href = '/';\n};\n\n// Get the currently logged-in user's token\nconst getToken = () => {\n  return localStorage.getItem('token');\n};\n\n// Check if the user is authenticated\nconst isAuthenticated = () => {\n  const token = getToken();\n  const result = token !== null;\n  return result;\n};\n\n// Attach Authorization header with the token for protected API calls\nconst setAuthHeader = () => {\n  const token = getToken();\n  console.log('auth header', 'token');\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n};\nconst checkBackendStatus = async () => {\n  try {\n    const response = await axios.get(`/auth/ping`);\n    return response.status === 200;\n  } catch (error) {\n    return false;\n  }\n};\nconst AuthService = {\n  login,\n  logout,\n  getToken,\n  isAuthenticated,\n  setAuthHeader,\n  isTokenExpired,\n  tokenTimeRemaining,\n  checkBackendStatus\n};\nexport default AuthService;","map":{"version":3,"names":["axios","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","login","email","password","formData","URLSearchParams","append","response","post","rawToken","data","jwtToken","split","console","log","defaults","common","setItem","_error$response","_error$response$data","Error","message","isTokenExpired","getToken","payload","decodedPayload","JSON","parse","atob","now","Math","floor","Date","exp","tokenTimeRemaining","remain","logout","removeItem","window","location","href","isAuthenticated","result","setAuthHeader","checkBackendStatus","get","status","AuthService"],"sources":["C:/Users/gaura/Desktop/Git Uploads/Faculty-Registration/frontend/src/services/AuthService.js"],"sourcesContent":["import axios from 'axios';\r\naxios.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem('token'); // Retrieve token from localStorage\r\n        if (token) {\r\n            config.headers['Authorization'] = `Bearer ${token}`; // Add token to Authorization header\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n//const API_URL = process.env.REACT_APP_API_BASE_URL;\r\n\r\n// Login function\r\nconst login = async (email, password) => {\r\n    try {\r\n        // Prepare data as key-value pairs\r\n        const formData = new URLSearchParams();\r\n        formData.append('username', email);\r\n        formData.append('password', password);\r\n       \r\n\r\n        // Send POST request with x-www-form-urlencoded format\r\n        const response = await axios.post(`/auth/login`, formData, {\r\n            headers: {\r\n                \r\n                'Content-Type': 'application/x-www-form-urlencoded', // Specify content type\r\n            },\r\n        });\r\n\r\n\r\n        const rawToken = response.data; // Full token, e.g., \"Bearer eyJhbGci...\"\r\n        const jwtToken = rawToken.split(' ')[1]; // Extract the JWT part\r\n\r\n        // Log the raw token and the extracted JWT\r\n        console.log('Full Token:', rawToken);\r\n        console.log('JWT Token:', jwtToken);\r\n        axios.defaults.headers.common['Authorization'] = rawToken;\r\n        // Save only the JWT in local storage\r\n        localStorage.setItem('token', jwtToken);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(error.response?.data?.message || 'Login failed');\r\n    }\r\n};\r\n\r\n\r\n//Expired Function\r\nconst isTokenExpired = () => {\r\n    const token = getToken();\r\n    if (!token) return true; // If no token exists, treat it as expired\r\n\r\n    try {\r\n        // Decode the token payload\r\n        const [, payload] = token.split('.');\r\n        const decodedPayload = JSON.parse(atob(payload));\r\n        const now = Math.floor(Date.now() / 1000);\r\n        return false;\r\n        return decodedPayload.exp < now; // true if expired, false otherwise\r\n    } catch (error) {\r\n        console.error('Error decoding token:', error);\r\n        return true; \r\n    }\r\n};\r\n\r\nconst tokenTimeRemaining = () => {\r\n    const token = getToken();\r\n    if (!token) return -1; // If no token exists, treat it as expired\r\n\r\n    try {\r\n        // Decode the token payload\r\n        const [, payload] = token.split('.');\r\n        const decodedPayload = JSON.parse(atob(payload));\r\n        const now = Math.floor(Date.now() / 1000);\r\n        const remain=decodedPayload.exp-now;\r\n        if(remain >= 0)\r\n            return remain;\r\n        else\r\n        {   \r\n            //logout();\r\n        }\r\n    } catch (error) {\r\n        console.error('Error decoding token:', error);\r\n        return -1; \r\n    }\r\n};\r\n\r\n\r\n// Logout function\r\nconst logout = () => {\r\n    localStorage.removeItem('token');\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    window.location.href = '/';\r\n};\r\n\r\n// Get the currently logged-in user's token\r\nconst getToken = () => {\r\n    return localStorage.getItem('token');\r\n};\r\n\r\n// Check if the user is authenticated\r\nconst isAuthenticated = () => {\r\n    const token = getToken();\r\n    const result =(token !== null);\r\n    return result;\r\n};\r\n\r\n// Attach Authorization header with the token for protected API calls\r\nconst setAuthHeader = () => {\r\n    const token = getToken();\r\n    console.log('auth header', 'token');\r\n    if (token) {\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    } else {\r\n        delete axios.defaults.headers.common['Authorization'];\r\n    }\r\n};\r\n\r\nconst checkBackendStatus = async () => {\r\n    try {\r\n        const response = await axios.get(`/auth/ping`);\r\n        return response.status === 200;\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n};\r\n\r\n\r\nconst AuthService = {\r\n    login,\r\n    logout,\r\n    getToken,\r\n    isAuthenticated,\r\n    setAuthHeader,\r\n    isTokenExpired,\r\n    tokenTimeRemaining,\r\n    checkBackendStatus\r\n};\r\n\r\nexport default AuthService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}