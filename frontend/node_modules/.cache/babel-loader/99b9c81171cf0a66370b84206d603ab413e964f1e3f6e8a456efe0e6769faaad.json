{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_BASE_URL;\n\n// Login function\nconst login = async (email, password) => {\n  try {\n    // Prepare data as key-value pairs\n    const formData = new URLSearchParams();\n    formData.append('username', email);\n    formData.append('password', password);\n\n    // Send POST request with x-www-form-urlencoded format\n    const response = await axios.post(`/auth/login`, formData, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded' // Specify content type\n      }\n    });\n    const rawToken = response.data; // Full token, e.g., \"Bearer eyJhbGci...\"\n    const jwtToken = rawToken.split(' ')[1]; // Extract the JWT part\n\n    // Log the raw token and the extracted JWT\n    console.log('Full Token:', rawToken);\n    console.log('JWT Token:', jwtToken);\n\n    // Save only the JWT in local storage\n    localStorage.setItem('token', jwtToken);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed');\n  }\n};\n\n//Expired Function\nconst isTokenExpired = () => {\n  const token = getToken();\n  if (!token) return true;\n  try {\n    const [, payload] = token.split('.'); // Decode payload\n    const decodedPayload = JSON.parse(atob(payload));\n    const now = Math.floor(Date.now() / 1000);\n    return decodedPayload.exp < now; // Return true if token is expired\n  } catch {\n    return true; // Treat invalid tokens as expired\n  }\n};\n\n// Logout function\nconst logout = () => {\n  localStorage.removeItem('token'); // Remove the token from local storage\n};\n\n// Get the currently logged-in user's token\nconst getToken = () => {\n  return localStorage.getItem('token');\n};\n\n// Check if the user is authenticated\nconst isAuthenticated = () => {\n  const token = getToken();\n  return token !== null; // Return true if token exists, false otherwise\n};\n\n// Attach Authorization header with the token for protected API calls\nconst setAuthHeader = () => {\n  const token = getToken();\n  console.log('auth header', 'token');\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `token`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n};\nconst AuthService = {\n  login,\n  logout,\n  getToken,\n  isAuthenticated,\n  setAuthHeader\n};\nexport default AuthService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_BASE_URL","login","email","password","formData","URLSearchParams","append","response","post","headers","rawToken","data","jwtToken","split","console","log","localStorage","setItem","error","_error$response","_error$response$data","Error","message","isTokenExpired","token","getToken","payload","decodedPayload","JSON","parse","atob","now","Math","floor","Date","exp","logout","removeItem","getItem","isAuthenticated","setAuthHeader","defaults","common","AuthService"],"sources":["C:/Users/gaura/Desktop/Git Uploads/Faculty-Registration/frontend/src/services/AuthService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_BASE_URL;\r\n\r\n// Login function\r\nconst login = async (email, password) => {\r\n    try {\r\n        // Prepare data as key-value pairs\r\n        const formData = new URLSearchParams();\r\n        formData.append('username', email);\r\n        formData.append('password', password);\r\n       \r\n\r\n        // Send POST request with x-www-form-urlencoded format\r\n        const response = await axios.post(`/auth/login`, formData, {\r\n            headers: {\r\n                \r\n                'Content-Type': 'application/x-www-form-urlencoded', // Specify content type\r\n            },\r\n        });\r\n\r\n\r\n        const rawToken = response.data; // Full token, e.g., \"Bearer eyJhbGci...\"\r\n        const jwtToken = rawToken.split(' ')[1]; // Extract the JWT part\r\n\r\n        // Log the raw token and the extracted JWT\r\n        console.log('Full Token:', rawToken);\r\n        console.log('JWT Token:', jwtToken);\r\n\r\n        // Save only the JWT in local storage\r\n        localStorage.setItem('token', jwtToken);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(error.response?.data?.message || 'Login failed');\r\n    }\r\n};\r\n\r\n\r\n//Expired Function\r\nconst isTokenExpired = () => {\r\n    const token = getToken();\r\n    if (!token) return true;\r\n\r\n    try {\r\n        const [, payload] = token.split('.'); // Decode payload\r\n        const decodedPayload = JSON.parse(atob(payload));\r\n        const now = Math.floor(Date.now() / 1000);\r\n\r\n        return decodedPayload.exp < now; // Return true if token is expired\r\n    } catch {\r\n        return true; // Treat invalid tokens as expired\r\n    }\r\n};\r\n\r\n\r\n// Logout function\r\nconst logout = () => {\r\n    localStorage.removeItem('token'); // Remove the token from local storage\r\n};\r\n\r\n// Get the currently logged-in user's token\r\nconst getToken = () => {\r\n    return localStorage.getItem('token');\r\n};\r\n\r\n// Check if the user is authenticated\r\nconst isAuthenticated = () => {\r\n    const token = getToken();\r\n    return token !== null; // Return true if token exists, false otherwise\r\n};\r\n\r\n// Attach Authorization header with the token for protected API calls\r\nconst setAuthHeader = () => {\r\n    const token = getToken();\r\n    console.log('auth header', 'token');\r\n    if (token) {\r\n        axios.defaults.headers.common['Authorization'] = `token`;\r\n    } else {\r\n        delete axios.defaults.headers.common['Authorization'];\r\n    }\r\n};\r\n\r\nconst AuthService = {\r\n    login,\r\n    logout,\r\n    getToken,\r\n    isAuthenticated,\r\n    setAuthHeader,\r\n};\r\n\r\nexport default AuthService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}