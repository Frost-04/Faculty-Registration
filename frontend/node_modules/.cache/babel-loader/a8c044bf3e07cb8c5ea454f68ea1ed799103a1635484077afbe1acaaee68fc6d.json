{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_BASE_URL;\n\n// Login function\nconst login = async (email, password) => {\n  try {\n    var _response$data;\n    // Prepare data as key-value pairs\n    const formData = new URLSearchParams();\n    formData.append('username', email);\n    formData.append('password', password);\n\n    // Send POST request with x-www-form-urlencoded format\n    const response = await axios.post(`/auth/login`, formData, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded' // Specify content type\n      }\n    });\n\n    // Log the entire response object to debug\n    console.log('API Response:', response);\n\n    // Save the JWT token in local storage\n    const token = (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.token; // Access the token if it exists\n    if (token) {\n      localStorage.setItem('token', token);\n      console.log('JWT Token:', token);\n    } else {\n      console.error('Token not found in response:', response.data);\n    }\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('Login Error:', error.response || error);\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed');\n  }\n};\n\n// Logout function\nconst logout = () => {\n  localStorage.removeItem('token'); // Remove the token from local storage\n};\n\n// Get the currently logged-in user's token\nconst getToken = () => {\n  return localStorage.getItem('token');\n};\n\n// Check if the user is authenticated\nconst isAuthenticated = () => {\n  const token = getToken();\n  return token !== null; // Return true if token exists, false otherwise\n};\n\n// Attach Authorization header with the token for protected API calls\nconst setAuthHeader = () => {\n  const token = getToken();\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n};\nconst AuthService = {\n  login,\n  logout,\n  getToken,\n  isAuthenticated,\n  setAuthHeader\n};\nexport default AuthService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_BASE_URL","login","email","password","_response$data","formData","URLSearchParams","append","response","post","headers","console","log","token","data","localStorage","setItem","error","_error$response","_error$response$data","Error","message","logout","removeItem","getToken","getItem","isAuthenticated","setAuthHeader","defaults","common","AuthService"],"sources":["C:/Users/gaura/Desktop/Git Uploads/Faculty-Registration/frontend/src/services/AuthService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_BASE_URL;\r\n\r\n// Login function\r\nconst login = async (email, password) => {\r\n    try {\r\n        // Prepare data as key-value pairs\r\n        const formData = new URLSearchParams();\r\n        formData.append('username', email);\r\n        formData.append('password', password);\r\n\r\n        // Send POST request with x-www-form-urlencoded format\r\n        const response = await axios.post(`/auth/login`, formData, {\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded', // Specify content type\r\n            },\r\n        });\r\n\r\n        // Log the entire response object to debug\r\n        console.log('API Response:', response);\r\n\r\n        // Save the JWT token in local storage\r\n        const token = response.data?.token; // Access the token if it exists\r\n        if (token) {\r\n            localStorage.setItem('token', token);\r\n            console.log('JWT Token:', token);\r\n        } else {\r\n            console.error('Token not found in response:', response.data);\r\n        }\r\n\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Login Error:', error.response || error);\r\n        throw new Error(error.response?.data?.message || 'Login failed');\r\n    }\r\n};\r\n\r\n// Logout function\r\nconst logout = () => {\r\n    localStorage.removeItem('token'); // Remove the token from local storage\r\n};\r\n\r\n// Get the currently logged-in user's token\r\nconst getToken = () => {\r\n    return localStorage.getItem('token');\r\n};\r\n\r\n// Check if the user is authenticated\r\nconst isAuthenticated = () => {\r\n    const token = getToken();\r\n    return token !== null; // Return true if token exists, false otherwise\r\n};\r\n\r\n// Attach Authorization header with the token for protected API calls\r\nconst setAuthHeader = () => {\r\n    const token = getToken();\r\n    if (token) {\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    } else {\r\n        delete axios.defaults.headers.common['Authorization'];\r\n    }\r\n};\r\n\r\nconst AuthService = {\r\n    login,\r\n    logout,\r\n    getToken,\r\n    isAuthenticated,\r\n    setAuthHeader,\r\n};\r\n\r\nexport default AuthService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;;AAElD;AACA,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACrC,IAAI;IAAA,IAAAC,cAAA;IACA;IACA,MAAMC,QAAQ,GAAG,IAAIC,eAAe,CAAC,CAAC;IACtCD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEL,KAAK,CAAC;IAClCG,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEJ,QAAQ,CAAC;;IAErC;IACA,MAAMK,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAAC,aAAa,EAAEJ,QAAQ,EAAE;MACvDK,OAAO,EAAE;QACL,cAAc,EAAE,mCAAmC,CAAE;MACzD;IACJ,CAAC,CAAC;;IAEF;IACAC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEJ,QAAQ,CAAC;;IAEtC;IACA,MAAMK,KAAK,IAAAT,cAAA,GAAGI,QAAQ,CAACM,IAAI,cAAAV,cAAA,uBAAbA,cAAA,CAAeS,KAAK,CAAC,CAAC;IACpC,IAAIA,KAAK,EAAE;MACPE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;MACpCF,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEC,KAAK,CAAC;IACpC,CAAC,MAAM;MACHF,OAAO,CAACM,KAAK,CAAC,8BAA8B,EAAET,QAAQ,CAACM,IAAI,CAAC;IAChE;IAEA,OAAON,QAAQ,CAACM,IAAI;EACxB,CAAC,CAAC,OAAOG,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACZR,OAAO,CAACM,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACT,QAAQ,IAAIS,KAAK,CAAC;IACtD,MAAM,IAAIG,KAAK,CAAC,EAAAF,eAAA,GAAAD,KAAK,CAACT,QAAQ,cAAAU,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBJ,IAAI,cAAAK,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,cAAc,CAAC;EACpE;AACJ,CAAC;;AAED;AACA,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACjBP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;AACtC,CAAC;;AAED;AACA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACnB,OAAOT,YAAY,CAACU,OAAO,CAAC,OAAO,CAAC;AACxC,CAAC;;AAED;AACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC1B,MAAMb,KAAK,GAAGW,QAAQ,CAAC,CAAC;EACxB,OAAOX,KAAK,KAAK,IAAI,CAAC,CAAC;AAC3B,CAAC;;AAED;AACA,MAAMc,aAAa,GAAGA,CAAA,KAAM;EACxB,MAAMd,KAAK,GAAGW,QAAQ,CAAC,CAAC;EACxB,IAAIX,KAAK,EAAE;IACPjB,KAAK,CAACgC,QAAQ,CAAClB,OAAO,CAACmB,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUhB,KAAK,EAAE;EACtE,CAAC,MAAM;IACH,OAAOjB,KAAK,CAACgC,QAAQ,CAAClB,OAAO,CAACmB,MAAM,CAAC,eAAe,CAAC;EACzD;AACJ,CAAC;AAED,MAAMC,WAAW,GAAG;EAChB7B,KAAK;EACLqB,MAAM;EACNE,QAAQ;EACRE,eAAe;EACfC;AACJ,CAAC;AAED,eAAeG,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}