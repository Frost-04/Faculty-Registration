{"ast":null,"code":"import axios from 'axios';\nimport AuthService from '../services/AuthService';\nconst API_URL = process.env.REACT_APP_API_BASE_URL;\n\n// Function to wrap and alert before each service call\nconst alertWrapper = fn => {\n  return async (...args) => {\n    if (AuthService.isTokenExpired()) {\n      // Call the function to check token expiration\n      AuthService.logout();\n    } else {\n      alert(\"Not Expired yet\");\n    }\n    return fn(...args); // Call the original function with its arguments\n  };\n};\nconst addCourse = async course => {\n  return axios.post(`/courses`, course);\n};\nconst getAllCourses = async () => {\n  return axios.get(`/courses`);\n};\nconst assignCourseToEmployee = async (courseId, employeeId) => {\n  return axios.post(`/courses/assign`, {\n    courseId,\n    employeeId\n  });\n};\n\n// Wrap each function with alertWrapper\nconst CourseService = {\n  addCourse: alertWrapper(addCourse),\n  getAllCourses: alertWrapper(getAllCourses),\n  assignCourseToEmployee: alertWrapper(assignCourseToEmployee)\n};\nexport default CourseService;","map":{"version":3,"names":["axios","AuthService","API_URL","process","env","REACT_APP_API_BASE_URL","alertWrapper","fn","args","isTokenExpired","logout","alert","addCourse","course","post","getAllCourses","get","assignCourseToEmployee","courseId","employeeId","CourseService"],"sources":["C:/Users/gaura/Desktop/Git Uploads/Faculty-Registration/frontend/src/services/CourseService.js"],"sourcesContent":["import axios from 'axios';\r\nimport AuthService from '../services/AuthService';\r\n\r\nconst API_URL = process.env.REACT_APP_API_BASE_URL;\r\n\r\n// Function to wrap and alert before each service call\r\nconst alertWrapper = (fn) => {\r\n    return async (...args) => {\r\n        if (AuthService.isTokenExpired()) { // Call the function to check token expiration\r\n            AuthService.logout();\r\n        } else {\r\n            alert(\"Not Expired yet\");\r\n        }\r\n        return fn(...args); // Call the original function with its arguments\r\n    };\r\n};\r\n\r\nconst addCourse = async (course) => {\r\n    return axios.post(`/courses`, course);\r\n};\r\n\r\nconst getAllCourses = async () => {\r\n    return axios.get(`/courses`);\r\n};\r\n\r\nconst assignCourseToEmployee = async (courseId, employeeId) => {\r\n    return axios.post(`/courses/assign`, { courseId, employeeId });\r\n};\r\n\r\n// Wrap each function with alertWrapper\r\nconst CourseService = {\r\n    addCourse: alertWrapper(addCourse),\r\n    getAllCourses: alertWrapper(getAllCourses),\r\n    assignCourseToEmployee: alertWrapper(assignCourseToEmployee),\r\n};\r\n\r\nexport default CourseService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,yBAAyB;AAEjD,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;;AAElD;AACA,MAAMC,YAAY,GAAIC,EAAE,IAAK;EACzB,OAAO,OAAO,GAAGC,IAAI,KAAK;IACtB,IAAIP,WAAW,CAACQ,cAAc,CAAC,CAAC,EAAE;MAAE;MAChCR,WAAW,CAACS,MAAM,CAAC,CAAC;IACxB,CAAC,MAAM;MACHC,KAAK,CAAC,iBAAiB,CAAC;IAC5B;IACA,OAAOJ,EAAE,CAAC,GAAGC,IAAI,CAAC,CAAC,CAAC;EACxB,CAAC;AACL,CAAC;AAED,MAAMI,SAAS,GAAG,MAAOC,MAAM,IAAK;EAChC,OAAOb,KAAK,CAACc,IAAI,CAAC,UAAU,EAAED,MAAM,CAAC;AACzC,CAAC;AAED,MAAME,aAAa,GAAG,MAAAA,CAAA,KAAY;EAC9B,OAAOf,KAAK,CAACgB,GAAG,CAAC,UAAU,CAAC;AAChC,CAAC;AAED,MAAMC,sBAAsB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,UAAU,KAAK;EAC3D,OAAOnB,KAAK,CAACc,IAAI,CAAC,iBAAiB,EAAE;IAAEI,QAAQ;IAAEC;EAAW,CAAC,CAAC;AAClE,CAAC;;AAED;AACA,MAAMC,aAAa,GAAG;EAClBR,SAAS,EAAEN,YAAY,CAACM,SAAS,CAAC;EAClCG,aAAa,EAAET,YAAY,CAACS,aAAa,CAAC;EAC1CE,sBAAsB,EAAEX,YAAY,CAACW,sBAAsB;AAC/D,CAAC;AAED,eAAeG,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}